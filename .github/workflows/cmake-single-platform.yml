# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches-ignore:
      - "main"
  pull_request:
    branches-ignore:
          - "main"

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  buildGcc:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build Server
      id: server
      if: always()
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target server -- -k

    - name: Build Client
      id: client
      if: always()
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target client -- -k

    - name: Build todo junto
      if: ${{ steps.client.outcome == 'success' &&  steps.server.outcome == 'success' }}
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -- -k

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

  buildClang:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/buildClang -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build Server
      id: server
      if: always()
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/buildClang --config ${{env.BUILD_TYPE}} --target server -- -k

    - name: Build Client
      id: client
      if: always()
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/buildClang --config ${{env.BUILD_TYPE}} --target client -- -k

    - name: Build todo junto
      if: ${{ steps.client.outcome == 'success' &&  steps.server.outcome == 'success' }}
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/buildClang --config ${{env.BUILD_TYPE}} -- -k

    - name: Test
      working-directory: ${{github.workspace}}/buildClang
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

  TODOs:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v3

    - name: Cuento la cantidad de TODOS

      run: sh ./build/grepearTodos.sh

  cppcheck:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v3

    - name: Cppcheck es solo una herramienta. Nadie nos obliga a esucharla. <Ni dioses ni reyes> - Andrew Ryan

      run: sh ./build/cppcheck.sh

  include-what-you-use:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v3

    - name: include-what-you-use es para limpiar un poco los archivos de los includes

      working-directory: ${{github.workspace}}/build

      run: iwyu_tool.py -p .
